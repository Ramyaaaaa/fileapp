{"version":3,"sources":["../src/index.js"],"names":["http","require","express","morgan","cors","bodyParser","PORT","app","server","createServer","smtpTransport","AWS","config","update","accessKeyId","secretAccessKey","region","storageDir","path","join","__dirname","storageConfig","multer","diskStorage","destination","req","file","cb","filename","Date","now","extname","originalname","s3","S3","upload","storage","bucket","metadata","fieldName","fieldname","key","toString","use","console","log","exposedHeaders","json","limit","set","err","db","AppRouter","listen","process","env","address","port"],"mappings":";;;;;;AACA;;AACA;;;;AACA;;;;AAQA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;;;AAZA,IAAMA,OAAOC,QAAQ,MAAR,CAAb;AACA,IAAMC,UAAUD,QAAQ,SAAR,CAAhB;AACA,IAAME,SAASF,QAAQ,QAAR,CAAf;AACA,IAAMG,OAAOH,QAAQ,MAAR,CAAb;AACA,IAAMI,aAAaJ,QAAQ,aAAR,CAAnB;AACA,IAAMK,OAAO,IAAb;AACA,IAAMC,MAAML,SAAZ;;;AAQAK,IAAIC,MAAJ,GAAaR,KAAKS,YAAL,CAAkBF,GAAlB,CAAb;AACA,IAAIG,gBAAgBT,QAAQ,2BAAR,CAApB;;AAEA;AACAU,iBAAIC,MAAJ,CAAWC,MAAX,CAAkB;AACdC,iBAAc,sBADA;AAEdC,qBAAkB;AAFJ,CAAlB;;AAKAJ,iBAAIC,MAAJ,CAAWI,MAAX,GAAoB,WAApB;;AAEA;;AAEA;AACA,IAAMC,aAAaC,eAAKC,IAAL,CAAUC,SAAV,EAAoB,IAApB,EAAyB,SAAzB,CAAnB;AACA,IAAIC,gBAAgBC,iBAAOC,WAAP,CAAmB;AACnCC,iBAAc,qBAACC,GAAD,EAAMC,IAAN,EAAYC,EAAZ,EAAkB;AAC9BA,WAAG,IAAH,EAASV,UAAT;AACD,KAHkC;AAInCW,cAAW,kBAACH,GAAD,EAAMC,IAAN,EAAYC,EAAZ,EAAkB;AAC3BA,WAAG,IAAH,EAASE,KAAKC,GAAL,KAAYZ,eAAKa,OAAL,CAAaL,KAAKM,YAAlB,CAArB;AACD;AANkC,CAAnB,CAApB;;AASA;;AAEA,IAAMC,KAAK,IAAItB,iBAAIuB,EAAR,EAAX;AACA,IAAMC,SAAS,sBAAO;AAClBC,aAAS,uBAAS;AAChBH,YAAIA,EADY;AAEhBI,gBAAQ,cAFQ;AAGhBC,kBAAU,kBAAUb,GAAV,EAAeC,IAAf,EAAqBC,EAArB,EAAyB;AACjCA,eAAG,IAAH,EAAS,EAACY,WAAWb,KAAKc,SAAjB,EAAT;AACD,SALe;AAMhBC,aAAK,aAAUhB,GAAV,EAAeC,IAAf,EAAqBC,EAArB,EAAyB;AAC5BA,eAAG,IAAH,EAAYE,KAAKC,GAAL,GAAWY,QAAX,EAAZ,SAAqChB,KAAKM,YAA1C;AACD;AARe,KAAT;AADS,CAAP,CAAf;;AAaA;AACAzB,IAAIoC,GAAJ,CAAQxC,OAAO,KAAP,CAAR;AACAyC,QAAQC,GAAR,CAAY,OAAZ;;AAEAtC,IAAIoC,GAAJ,CAAQvC,KAAK;AACT0C,oBAAgB;AADP,CAAL,CAAR;;AAIAvC,IAAIoC,GAAJ,CAAQtC,WAAW0C,IAAX,CAAgB;AACpBC,WAAO;AADa,CAAhB,CAAR;AAGAzC,IAAI0C,GAAJ,CAAQ,MAAR,EAAgB7B,SAAhB;AACAb,IAAI0C,GAAJ,CAAQ,YAAR,EAAqBhC,UAArB;AACAV,IAAI4B,MAAJ,GAAaA,MAAb;AACA5B,IAAI0B,EAAJ,GAAQA,EAAR;AACA;AACA;AACA,uBAAQ,UAACiB,GAAD,EAAKC,EAAL,EAAU;;AAEd,QAAGD,GAAH,EAAQ;AACJN,gBAAQC,GAAR,CAAY,iCAAZ;AACA,cAAOK,GAAP;AACH;;AAED3C,QAAI0C,GAAJ,CAAQ,IAAR,EAAaE,EAAb;;AAIA;AACA,QAAIC,gBAAJ,CAAc7C,GAAd;AACAA,QAAIC,MAAJ,CAAW6C,MAAX,CAAkBC,QAAQC,GAAR,CAAYjD,IAAZ,IAAoBA,IAAtC,EAA4C,YAAM;AAC9CsC,gBAAQC,GAAR,6BAAsCtC,IAAIC,MAAJ,CAAWgD,OAAX,GAAqBC,IAA3D;AACH,KAFD;AAGH,CAhBD;;kBAkBelD,G","file":"index.js","sourcesContent":["\r\nimport {connect} from \"./database\";\r\nimport AppRouter from \"./router\";\r\nimport multer from 'multer';\r\nconst http = require('http')\r\nconst express = require('express')\r\nconst morgan = require('morgan')\r\nconst cors = require('cors')\r\nconst bodyParser = require('body-parser')\r\nconst PORT = 3000;\r\nconst app = express();\r\nimport path from 'path'\r\nimport AWS from 'aws-sdk'\r\n\r\nimport nodemailer from 'nodemailer'\r\nimport smtp from \"./config\"\r\nimport multerS3 from 'multer-s3'\r\n\r\napp.server = http.createServer(app);\r\nvar smtpTransport = require('nodemailer-smtp-transport');\r\n\r\n//amazon s3 setup\r\nAWS.config.update({\r\n    accessKeyId : 'AKIAZ2LYBQU7B6A5XBZV',\r\n    secretAccessKey : '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'\r\n});\r\n\r\nAWS.config.region = 'us-east-1'\r\n\r\n//Setup email\r\n\r\n//File storage config\r\nconst storageDir = path.join(__dirname,'..','storage')\r\nvar storageConfig = multer.diskStorage({\r\n    destination:  (req, file, cb) =>{\r\n      cb(null, storageDir)\r\n    },\r\n    filename:  (req, file, cb) =>{\r\n      cb(null, Date.now()+ path.extname(file.originalname))\r\n    }\r\n  });\r\n\r\n//const upload = multer({storage:storageConfig})\r\n  \r\nconst s3 = new AWS.S3();\r\nconst upload = multer({\r\n    storage: multerS3({\r\n      s3: s3,\r\n      bucket: 'ramyafileapp',\r\n      metadata: function (req, file, cb) {\r\n        cb(null, {fieldName: file.fieldname});\r\n      },\r\n      key: function (req, file, cb) {\r\n        cb(null, `${Date.now().toString()}-${file.originalname}`)\r\n      }\r\n    })\r\n  })\r\n\r\n//End of file storage config\r\napp.use(morgan('dev'));\r\nconsole.log(\"HO000\");\r\n\r\napp.use(cors({\r\n    exposedHeaders: \"*\"\r\n}));\r\n\r\napp.use(bodyParser.json({\r\n    limit: '50mb'\r\n}));\r\napp.set('root', __dirname);\r\napp.set('storageDir',storageDir);\r\napp.upload = upload;\r\napp.s3= s3;\r\n// app.email = email;\r\n//Connect to db\r\nconnect((err,db)=>{\r\n    \r\n    if(err) {\r\n        console.log(\"An error connecting to database\");\r\n        throw (err);\r\n    }\r\n\r\n    app.set('db',db);\r\n\r\n\r\n\r\n    //init router\r\n    new AppRouter(app);\r\n    app.server.listen(process.env.PORT || PORT, () => {\r\n        console.log(`App is running on port ${app.server.address().port}`);\r\n    });\r\n})\r\n\r\nexport default app;"]}