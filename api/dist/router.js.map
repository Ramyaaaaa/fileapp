{"version":3,"sources":["../src/router.js"],"names":["require","ObjectID","AppRouter","app","setupRouters","uploadDir","get","upload","dba","db1","db","req","res","next","console","log","status","json","version","post","array","files","_","fileModels","each","fileObject","newFile","File","initWithObject","push","length","collection","insert","err","result","error","message","Post","from","to","insertedIds","insertOne","sendEmail","Email","sendDownloadLink","info","body","fileID","params","id","find","_id","toArray","fileName","file","downloadUrl","S3","getDownloadUrl","redirect","getPostById","archiver","FileArchiver","download","postId","callback","postObjectId","limit","results","Error","fileIds","i","j","fileIdList","$in"],"mappings":"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","file":"router.js","sourcesContent":["import { version } from '../package.json';\r\nimport path from 'path';\r\nimport _ from 'lodash';\r\nimport File from './models/file';\r\nconst { ObjectID } = require('mongodb');\r\nimport Post from \"./models/post\";\r\nimport FileArchiver from './archiver'\r\nimport S3 from './s3'\r\nimport Email from './email'\r\nclass AppRouter {\r\n\r\n    constructor(app) {\r\n        this.app = app;\r\n        this.setupRouters();\r\n    }\r\n\r\n    setupRouters() {\r\n\r\n        const app = this.app;\r\n        const uploadDir = app.get('storageDir');\r\n        const upload = app.upload;\r\n        const dba = app.get('db');\r\n        const db1 = dba.db('fileapp');\r\n\r\n\r\n\r\n        app.get('/', (req, res, next) => {\r\n\r\n            console.log(\"this is backend /\")\r\n            return res.status(200).json({\r\n                version: version\r\n            });\r\n        });\r\n\r\n\r\n        //Upload routing\r\n        app.post('/api/upload', upload.array('files'), (req, res, next) => {\r\n\r\n            console.log(\"this is backend /api/upload\")\r\n            const files = _.get(req, 'files', []);\r\n\r\n            console.log(\"files sent to s3\",files);\r\n            let fileModels = [];\r\n            _.each(files, (fileObject) => {\r\n\r\n                var newFile = new File(app).initWithObject(fileObject);\r\n                fileModels.push(newFile);\r\n\r\n            })\r\n            if (fileModels.length) {\r\n\r\n                db1.collection('files').insert(fileModels, (err, result) => {\r\n                    if (err) {\r\n                        return res.status(503).json({\r\n                            error: {\r\n                                message: \"Unable to save your file\"\r\n                            }\r\n                        })\r\n                    }\r\n\r\n\r\n                    let post = new Post(app).initWithObject({\r\n\r\n                        from: _.get(req, 'body.from'),\r\n                        to: _.get(req, 'body.to'),\r\n                        message: _.get(req, 'body.message'),\r\n\r\n                        files: result.insertedIds,\r\n\r\n                    });\r\n                    console.log(\"post \" + post['from']);\r\n\r\n                    db1.collection('posts').insertOne(post, (err, result) => {\r\n                        if (err) {\r\n\r\n                            return res.status(503).json({\r\n                                error: {\r\n                                    message: \"Upload could not be saved\"\r\n                                }\r\n                            })\r\n                        }\r\n\r\n\r\n                        //implement email sending to user with download link\r\n\r\n                        const sendEmail = new Email(app).sendDownloadLink(post,(err,info)=>{\r\n\r\n                            if(err) {\r\n                                console.log(\"An error has occured\",err);\r\n                            }\r\n                            \r\n                        })\r\n                        //callback to react \r\n\r\n                        return res.json(post);\r\n                    });\r\n                    console.log(\"save\", req.body, result);\r\n\r\n\r\n                });\r\n\r\n\r\n\r\n\r\n            }\r\n            else {\r\n                return res.status(503).json({\r\n                    error:\r\n                    {\r\n                        message: \"Files to upload is required\"\r\n                    }\r\n                })\r\n            }\r\n\r\n        });\r\n        //Download routing\r\n\r\n        app.get('/api/download/:id', (req, res, next) => {\r\n            const fileID = req.params.id;\r\n\r\n\r\n            db1.collection('files').find({ _id: ObjectID(fileID) }).toArray((err, result) => {\r\n\r\n                const fileName = _.get(result, '[0].name');\r\n                console.log(\"filename\" + fileName);\r\n\r\n                if (err || !fileName) {\r\n                    return res.status(503).json({\r\n                        error: {\r\n                            message: \"Unable to download your file\"\r\n                        }\r\n                    })\r\n                }\r\n\r\n                console.log(\"Find file from db\", err, result);\r\n\r\n                // const filePath = path.join(uploadDir, fileName);\r\n                // return res.download(filePath,_.get(result,'[0].originalName'), (err) => {\r\n                //     if (err) {\r\n                //         return res.status(404).json({\r\n                //             error: {\r\n                //                 message: 'File not found'\r\n                //             }\r\n                //         });\r\n                //     }\r\n                //     else {\r\n                //         console.log(\"File downloaded\")\r\n                //     }\r\n                // })\r\n\r\n                //Download from S3\r\n                const file = _.get(result,'[0]');\r\n               //proxy download from s3\r\n                // const downloader = new S3(app,res).download(file);\r\n                //  return downloader;\r\n\r\n                const downloadUrl = new S3(app,res).getDownloadUrl(file);\r\n\r\n                return res.redirect(downloadUrl)\r\n            });\r\n\r\n        });\r\n\r\n        console.log(\"The app routing is init\");\r\n\r\n\r\n\r\n\r\n        app.get('/api/posts/:id/download', (req, res, next) => {\r\n\r\n            const id = _.get(req,'params.id',null);\r\n            this.getPostById(id,(err,result)=>{\r\n                if(err){\r\n                    return res.status(404).json({\r\n                        error:\r\n                        {\r\n                            message: 'File not found'\r\n                        }\r\n                    })        \r\n                }\r\n\r\n                const archiver = new FileArchiver(app,_.get(result,'files',[]),res).download(); \r\n                return archiver;\r\n\r\n            })\r\n                  })\r\n        // routing for post detail  /api/posts/:id\r\n\r\n        app.get('/api/posts/:id', (req, res, next) => {\r\n\r\n            const postId = _.get(req,'params.id');\r\n\r\n            this.getPostById(postId,(err,result)=>{\r\n                if(err){\r\n                    return res.status(404).json({\r\n                        error:\r\n                        {\r\n                            message: 'File not found'\r\n                        }\r\n                    })        \r\n                }\r\n                return res.json(result);\r\n            })\r\n\r\n        })\r\n    }\r\n\r\n\r\n\r\n    getPostById(id, callback = () => { }) {\r\n\r\n        const app = this.app;\r\n        const dba = app.get('db');\r\n        const db1 = dba.db('fileapp');\r\n\r\n\r\n        let postObjectId = null;\r\n\r\n        try {\r\n            postObjectId = new ObjectID(id);\r\n        }\r\n\r\n        catch (err) {\r\n\r\n            return callback(err, null);\r\n        }\r\n\r\n        db1.collection('posts').find({ _id: postObjectId }).limit(1).toArray((err, results) => {\r\n            const result = _.get(results, '[0]');\r\n            console.log(\"result\" + result);\r\n            if (err || !result) {\r\n\r\n                return callback(err ? err : new Error(\"File not found\"));\r\n\r\n            }\r\n            const fileIds = _.get(result, 'files', []);\r\n\r\n\r\n            let i, j;\r\n            const fileIdList = [];\r\n            for (i in fileIds)\r\n                fileIdList.push(fileIds[i])\r\n\r\n            db1.collection('files').find({ _id: { $in: fileIdList } }).toArray((err, files) => {\r\n\r\n                if (err || !files || !files.length) {\r\n                    return callback(err ? err : new Error(\"File not found\"));\r\n                }\r\n\r\n                result.files = files;\r\n                return callback(null, result)\r\n            })\r\n        })\r\n\r\n\r\n    }\r\n}\r\n\r\nexport default AppRouter;"]}